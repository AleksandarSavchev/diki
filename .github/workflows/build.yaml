name: Build

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        default: snapshot
        description: |
          the mode to use. either `snapshot` or `release`. Will affect effective version, as well
          as target-oci-registry.

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}
      version-commit-callback-action-path: ./.github/actions/prepare-release
    permissions:
      contents: read

  diki-executables:
    name: Build Diki-Executables
    needs:
      - prepare
    permissions:
      contents: read
    strategy:
      matrix:
        args:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: darwin
            arch: amd64
            runner: ubuntu-latest
          - os: darwin
            arch: arm64
            runner: ubuntu-latest
    runs-on: ${{ matrix.args.runner }}
    steps:
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      - uses: gardener/cc-utils/.github/actions/import-commit@master
        with:
          commit-objects-artefact: ${{ needs.prepare.outputs.version-commit-artefact }}
          after-import: rebase
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5  # v5.5.0
        with:
          go-version-file: 'go.mod'
      - name: build-diki
        shell: bash
        run: |
          set -euo pipefail

          mkdir /tmp/blobs.d
          os=${{ matrix.args.os }}
          arch=${{ matrix.args.arch }}
          extension=${{ matrix.args.os == 'windows' && '.exe' || '' }}

          GOOS=${{ matrix.args.os }} \
          GOARCH=${{ matrix.args.arch }} \
          GO111MODULE=on \
            go build \
              -ldflags "$(hack/get-build-ld-flags.sh)" \
              -o "/tmp/blobs.d/diki-${os}-${arch}${extension}"  \
              cmd/diki/main.go
      - uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: /tmp/blobs.d
          ocm-resources: |
            name: diki
            relation: local
            type: executable
            extraIdentity:
              os: ${{ matrix.args.os }}
              architecture: ${{ matrix.args.arch }}
            access:
              type: localBlob
              localReference: diki-${{ matrix.args.os }}-${{ matrix.args.arch }}${{ matrix.args.os == 'windows' && '.exe' || '' }}
